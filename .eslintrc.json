{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": true
  },
  "plugins": [
    "react",
    "@typescript-eslint",
    "jsx-a11y",
    "import",
    "tailwindcss"
  ],
  "extends": [
    "prettier",
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:@typescript-eslint/stylistic-type-checked",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:tailwindcss/recommended",
    "plugin:react/recommended",
    "plugin:jsx-a11y/recommended",
    "next/core-web-vitals"
  ],
  "rules": {
    // Typescript rules
    "@typescript-eslint/array-type": [
      "error",
      {
        "default": "array",
        "readonly": "array"
      }
    ],
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "@typescript-eslint/consistent-type-exports": "error",
    "@typescript-eslint/consistent-type-imports": [
      "error",
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": true,
        "fixStyle": "separate-type-imports"
      }
    ],
    "default-param-last": "off",
    "@typescript-eslint/default-param-last": "error",
    "@typescript-eslint/explicit-function-return-type": [
      "warn",
      {
        "allowExpressions": true
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": "warn",
    "init-declarations": "off",
    "@typescript-eslint/init-declarations": ["error", "always"],
    "max-params": "off",
    "@typescript-eslint/max-params": "error",
    "@typescript-eslint/method-signature-style": "error",
    "no-array-constructor": "off",
    "@typescript-eslint/no-array-constructor": "error",
    "@typescript-eslint/no-confusing-void-expression": "error",
    "@typescript-eslint/no-import-type-side-effects": "error",
    "no-loop-func": "off",
    "@typescript-eslint/no-loop-func": "error",
    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": [
      "warn",
      {
        "ignoreDefaultValues": true,
        "enforceConst": true,
        "ignoreEnums": true,
        "ignoreNumericLiteralTypes": true,
        "ignoreReadonlyClassProperties": true,
        "ignoreTypeIndexes": true
      }
    ],
    "@typescript-eslint/no-meaningless-void-operator": "warn",
    "@typescript-eslint/no-mixed-enums": "error",
    "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-condition": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    //"@typescript-eslint/no-unnecessary-template-expression": "error",
    "@typescript-eslint/no-unnecessary-type-assertion": "error",
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "vars": "all",
        "args": "all",
        "varsIgnorePattern": "^_"
      }
    ],
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "error",
    "@typescript-eslint/no-useless-empty-export": "error",
    "no-throw-literal": "off",
    "@typescript-eslint/only-throw-error": "error",
    "prefer-destructuring": "off",
    "@typescript-eslint/prefer-destructuring": "error",
    "@typescript-eslint/prefer-enum-initializers": "error",
    "@typescript-eslint/prefer-find": "error",
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-includes": "error",
    "@typescript-eslint/prefer-literal-enum-member": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "prefer-promise-reject-errors": "off",
    "@typescript-eslint/prefer-promise-reject-errors": "error",
    "@typescript-eslint/prefer-reduce-type-parameter": "error",
    "@typescript-eslint/prefer-regexp-exec": "error",
    "@typescript-eslint/prefer-string-starts-ends-with": "error",
    "@typescript-eslint/promise-function-async": "error",
    "@typescript-eslint/require-array-sort-compare": "error",
    "no-return-await": "off",
    "@typescript-eslint/return-await": "error",
    "@typescript-eslint/sort-type-constituents": "error",
    "@typescript-eslint/strict-boolean-expressions": [
      "error",
      {
        "allowString": false,
        "allowNumber": false,
        "allowNullableObject": false
      }
    ],
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",

    // Eslint Possible Problems
    "array-callback-return": "warn",
    "no-await-in-loop": "warn",
    "no-inner-declarations": "warn",
    "no-promise-executor-return": "error",
    "no-self-compare": "error",
    "no-template-curly-in-string": "error",
    "no-unmodified-loop-condition": "warn",
    "no-unreachable-loop": "warn",
    // "no-useless-assignment": "error",
    "require-atomic-updates": "warn",

    // Eslint Suggestions
    "accessor-pairs": "error",
    "arrow-body-style": ["warn", "as-needed"],
    "block-scoped-var": "error",
    "capitalized-comments": "error",
    "consistent-return": "error",
    "curly": ["error", "multi-or-nest", "consistent"],
    "dot-notation": "error",
    "eqeqeq": "error",
    "max-depth": "warn",
    "max-lines-per-function": "warn",
    "no-console": "error",
    "no-else-return": "warn",
    "no-empty-function": "error",
    "no-implicit-coercion": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "error",
    "no-negated-condition": "warn",
    "no-restricted-imports": [
      "error",
      {
        "patterns": ["../!(_)"]
      }
    ],
    "no-unneeded-ternary": "error",
    "no-var": "error",
    "no-warning-comments": "warn",
    "object-shorthand": "error",
    "prefer-const": "error",

    // Import rules
    "import/no-default-export": "error",

    // Accessibility rules
    "jsx-a11y/label-has-associated-control": [
      "error",
      {
        "labelComponents": ["Label"],
        "labelAttributes": ["label"],
        "controlComponents": ["Input", "Select"],
        "depth": 2,
        "required": {
          "some": ["nesting", "id"]
        }
      }
    ],
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["hrefLeft", "hrefRight"],
        "aspects": ["invalidHref", "preferButton"]
      }
    ],

    // React
    "react/prop-types": "off",
    "react/jsx-key": "error",
    "react/jsx-no-target-blank": "error",
    "react/jsx-no-useless-fragment": "warn",
    "react/no-array-index-key": "warn",
    "react/no-deprecated": "warn",
    "react/no-unused-state": "error",
    "react/button-has-type": "error",
    "react/display-name": "error",
    "react/hook-use-state": "error",
    "react/jsx-fragments": ["error", "element"],
    "react/no-children-prop": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-curly-brace-presence": "error",
    "react/jsx-boolean-value": "error",
    "react/no-direct-mutation-state": "error",
    "react/self-closing-comp": "error",
    "react/no-unknown-property": "error",
    "react/boolean-prop-naming": [
      "warn",
      {
        "rule": "^(is|has|use)[A-Z]([A-Za-z0-9]?)+",
        "message": "It is better if your prop ({{ propName }}) matches this pattern: ({{ pattern }})",
        "validateNested": true
      }
    ],
    "react/function-component-definition": [
      "error",
      {
        "namedComponents": ["arrow-function"],
        "unnamedComponents": "arrow-function"
      }
    ],

    // Tailwind
    "tailwindcss/enforces-negative-arbitrary-values": "error",
    "tailwindcss/enforces-shorthand": "error",
    "tailwindcss/no-contradicting-classname": "error"
  },
  "overrides": [
    // Pages router
    {
      "files": ["src/pages/**/*"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    // App router
    {
      "files": [
        "src/app/**/{page,layout,not-found,global-error,error,default,template,loading}.tsx"
      ],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    // Middleware
    {
      "files": ["src/middleware.ts"],
      "rules": {
        "import/no-default-export": "off"
      }
    }
  ]
}
