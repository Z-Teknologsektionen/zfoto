// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Album {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  images      Image[]
  visible     Boolean  @default(true)
  date        DateTime @default(now())
  isReception Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, date])
}

model Image {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  filename     String   @unique
  coverImage   Boolean  @default(false)
  album        Album    @relation(fields: [albumId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  albumId      String   @db.ObjectId
  photographer String   @default("zFoto")
  visible      Boolean  @default(true)
  date         DateTime @default(now())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now()) @updatedAt //Optional because of added after the fact
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Roles     @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Roles {
  ADMIN
  USER
}
